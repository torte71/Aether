name: Automated builds

on: [push]
#on:
#  push:
#    tags:
#      - 'v*'
#  #if: ${{ github.ref_type == 'tag'}}

defaults:
  run:
    shell: bash

env:
  BUILD_TYPE: Release

jobs:
  create-source-archive:
    runs-on: ubuntu-20.04

    outputs:
        artifact-name: ${{ env.ARCHIVE_NAME }}

    steps:
      #    - name: Move tag 'Latest'
      #      uses: weareyipyip/walking-tag-action@v1
      #      with:
      #        tag-name: Latest
      #        tag-message: Latest git version
      #      env:
      #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v3.3.0
      with:
        path: aether
        submodules: recursive

    - name: Move tag 'Latest'
      uses: rickstaa/action-create-tag@v1.5.4
      #working-directory: ${{github.workspace}}/aether/
      working-directory: aether/
      with:
        tag: "Latest"
        message: "Latest git version"
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Archive Name
      run: echo "ARCHIVE_NAME=aether-source-code" >> "$GITHUB_ENV"

    - uses: actions/upload-artifact@v3.1.2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: aether/

  build-macos:
    runs-on: macos-latest

    outputs:
        artifact-name: ${{ env.ARCHIVE_NAME }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set Archive Name
      run: echo "ARCHIVE_NAME=aether-macos" >> "$GITHUB_ENV"

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Build Plugin
      working-directory: ${{github.workspace}}/build
      env:
        CXX: clang++
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS="on"
        cmake --build . --config $BUILD_TYPE -j3
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C $BUILD_TYPE

    - name: Prepare Artifact for Upload
      run: |
        cmake -E make_directory artifact
        cmake -E rename build/aether.lv2 artifact/aether.lv2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{github.workspace}}/artifact

  build-ubuntu-amd64:
    runs-on: ubuntu-20.04

    outputs:
        artifact-name: ${{ env.ARCHIVE_NAME }}

    strategy:
      matrix:
        config:
          - { compiler: GNU,  CC: gcc-10,   CXX: g++-10 }
          - { compiler: LLVM, CC: clang-10, CXX: clang++-10 }
          
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Update APT Lists
      run: sudo apt-get update
      
    - name: Install Dependencies
      run: sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev

    - name: Set Archive Name
      run: echo "ARCHIVE_NAME=aether-linux-amd64-${{ matrix.config.compiler }}" >> "$GITHUB_ENV"

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Build Plugin
      working-directory: ${{github.workspace}}/build
      env:
        CC: ${{ matrix.config.CC }}
        CXX: ${{ matrix.config.CXX }}
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS="on"
        cmake --build . --config $BUILD_TYPE -j2
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C $BUILD_TYPE

    - name: Prepare Artifact for Upload
      run: |
        cmake -E make_directory artifact
        cmake -E rename build/aether.lv2 artifact/aether.lv2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{github.workspace}}/artifact

  build-ubuntu-i686:
    runs-on: ubuntu-20.04

    outputs:
        artifact-name: ${{ env.ARCHIVE_NAME }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: add i386 architecture
      run: sudo dpkg --add-architecture i386

    - name: Update APT Lists
      run: sudo apt-get update

    - name: Install Dependencies
      run: sudo apt-get install g++-10-multilib libgl1-mesa-dev:i386 libglu1-mesa-dev:i386

    - name: Set Archive Name
      run: echo "ARCHIVE_NAME=aether-linux-i686" >> "$GITHUB_ENV"

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Build Plugin
      working-directory: ${{github.workspace}}/build
      env:
        CC: gcc-10
        CXX: g++-10
        CFLAGS: -m32
        CXXFLAGS: -m32
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS="on"
        cmake --build . --config $BUILD_TYPE -j2
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C $BUILD_TYPE

    - name: Prepare Artifact for Upload
      run: |
        cmake -E make_directory artifact
        cmake -E rename build/aether.lv2 artifact/aether.lv2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{github.workspace}}/artifact

  build-windows:
    runs-on: windows-2019

    outputs:
        artifact-name: ${{ env.ARCHIVE_NAME }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set Archive Name
      run: echo "ARCHIVE_NAME=aether-windows" >> "$GITHUB_ENV"

    - name: Build Plugin
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" ..
        cmake --build . --config=release -j2
    - name: Prepare Artifact for Upload
      run: |
        cmake -E make_directory artifact
        cmake -E rename build/aether.lv2 artifact/aether.lv2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{github.workspace}}/artifact

  validate-ttl:
    runs-on: ubuntu-20.04

    needs:
      - build-macos
      - build-ubuntu-amd64
      - build-ubuntu-i686
      - build-windows

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Clone lv2
      uses: actions/checkout@v2
      with:
        repository: lv2/lv2
        path: lv2

    - name: Update APT Lists
      run: sudo apt-get update

    - name: Install sord_validate
      run: sudo apt-get install sordi

    - name: Validate ttl
      run: |
        find -name 'aether.lv2' -exec sh -c ' \
          sord_validate $(find lv2 -name "*.ttl") $(find $0 -name "*.ttl") \
        ' {} \;

  release:
    runs-on: ubuntu-20.04
    #if: ${{ github.ref_type == 'tag'}}

    needs:
      - create-source-archive
      - build-macos
      - build-ubuntu-amd64
      - build-ubuntu-i686
      - build-windows

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Archives
      run: |
        VER=${{ github.ref_name }}
        if [[ $VER =~ ^v ]]; then VER=${VER:1} ; fi
        export VER
        (cd aether-source-code;     zip -r ../aether-$VER-source-code.zip src)
        (cd aether-macos;           zip -r ../aether-$VER-macos-amd64.zip aether.lv2)
        (cd aether-linux-amd64-GNU; zip -r ../aether-$VER-linux-amd64.zip aether.lv2)
        (cd aether-linux-i686;      zip -r ../aether-$VER-linux-i686.zip aether.lv2)
        (cd aether-windows;         zip -r ../aether-$VER-windows-amd64.zip aether.lv2)

    - uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: Latest
        prerelease: true
        files: |
          *.zip
